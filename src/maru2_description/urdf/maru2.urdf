<?xml version='1.0'?>
<robot name="maru2">
  <!-- Give the robot a color -->
  <material name="robotcolor">
    <color rgba="1 0.757 0.147 1"/> <!-- yellow -->
  </material>
  <material name="footprintcolor">
    <color rgba="0.631 0.09 0.09 1"/> <!-- red -->
  </material>
  <material name="auxcolor">
    <color rgba="0.09 0.09 0.773 1"/> <!-- blue -->
  </material>

  <!-- base of the robot -->
  <link name="base_footprint">
   <visual>
      <origin xyz="-0.2 0 0.025" rpy="0 0 0" />
      <geometry>
        <cylinder radius="0.2" length="0.05" />
      </geometry>
      <material name="footprintcolor"/>
    </visual>
    <collision name="base_footprint_collision">
      <origin xyz="-0.2 0 0.025" />
      <geometry>
        <cylinder radius="0.2" length="0.05" />
      </geometry>
    </collision>
  </link>

  <joint name="base_link_core" type="fixed">
    <origin xyz="-0.2 0 0" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="core_link" />
  </joint>

  <!-- the model, allows for seeing the front & orientation-->
  <link name="core_link">
    <inertial>
      <mass value="50" />
      <origin xyz="0 0 0" />
      <inertia ixx="50.0" ixy="0.0" ixz="0.0"
               iyy="50.0" iyz="0.0"
               izz="50.0" />
    </inertial>
    <visual>
      <origin xyz="0 0 0.1" />
      <geometry>
        <box size="0.4 0.2 0.2" />
      </geometry>
      <material name="robotcolor"/>
    </visual>
  </link>

  <!-- Add gazebo specific stuff to the base. planar move and color -->
  <gazebo>
    <plugin name="object_controller" filename="libgazebo_ros_planar_move.so">
      <commandTopic>controller/cmd_vel</commandTopic>
      <odometryTopic>move_odom</odometryTopic>
      <odometryFrame>odom_frame</odometryFrame>
      <odometryRate>20.0</odometryRate>
      <robotBaseFrame>base_footprint</robotBaseFrame>
    </plugin>
  </gazebo>

  <gazebo reference="base_footprint">
    <material>Gazebo/Red</material>
  </gazebo>

  <!-- color the core -->
  <gazebo reference="core_link">
    <material>Gazebo/DarkYellow</material>
  </gazebo>

  <!-- Now set up sensors -->
  <!-- IMU -->
  <link name="imu_link">
    <visual>
      <origin xyz="0 0 0.01" />
      <geometry>
        <box size="0.05 0.025 0.02" />
      </geometry>
      <material name="auxcolor"/>
    </visual>
  </link>

  <joint name="core_link_imu" type="fixed">
    <origin xyz="0 0 0.2" rpy="0 0 0" />
    <parent link="core_link"/>
    <child link="imu_link" />
  </joint>
  
  <!-- get an imu publisher -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>imu</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.05</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
    <material>Gazebo/Blue</material>
  </gazebo>

  <!-- Hokuyo Laser, from Gazebo Ros Plugins Page -->
  <link name="laser_link">
    <visual>
      <origin xyz="0 0 0.01" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.01" length="0.02"/>
      </geometry>
      <material name="auxcolor"/>
    </visual>
  </link>

  <joint name="core_link_laser" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 0 0.22" rpy="0 0 0"/>
    <parent link="core_link"/>
    <child link="laser_link"/>
  </joint>

  <!-- Lazer config -->
  <gazebo reference="laser_link">
    <sensor type="ray" name="laser_hokuyo_sensor">
      <visualize>false</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <!-- get a scan every half degree -->
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-3.1415927</min_angle>
            <max_angle>3.1415927</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="laser_hokuyo_sensor" filename="libgazebo_ros_laser.so">
        <topicName>laser</topicName>
        <frameName>/laser_link</frameName>
      </plugin>
    </sensor>
    <material>Gazebo/Blue</material>
  </gazebo>

  <!-- For proximity, we're going to use the same thing, but adapt as proximity through a middleman which pulls the minimum forward distance -->
  <gazebo reference="laser_link">
    <!-- front -->
    <sensor type="ray" name="laser_proximity_sensor_front">
      <visualize>false</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <!-- get 140 points spanning the 35 degree -->
            <samples>140</samples>
            <resolution>1</resolution>
            <min_angle>-0.305433</min_angle>
            <max_angle>0.305433</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>2.0</max>
          <resolution>0.01</resolution>
        </range>
        <!-- it's just going to be noisier -->
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.03</stddev>
        </noise>
      </ray>
      <plugin name="laser_proximity_sensor_front" filename="libgazebo_ros_laser.so">
        <topicName>source/proximity_front_raw</topicName>
        <frameName>/laser_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Camera -->
  <link name="camera_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="auxcolor"/>
    </visual>
  </link>

  <joint name="core_link_camera" type="fixed">
    <origin xyz="0.15 0 0.225" rpy="0 0 0"/>
    <parent link="core_link"/>
    <child link="camera_link"/>
  </joint>

  <gazebo reference="camera_link">
    <sensor type="camera" name="pinhole_camera">
      <update_rate>20.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
    <material>Gazebo/Blue</material>
  </gazebo>

  <!-- Bumper to detect collisions -->
  <gazebo reference="base_footprint">
    <self_collide>false</self_collide>
    <sensor type="contact" name="contact_sensor">
      <contact>
        <!-- name retrieved by inspecting the converted model in gazebo -->
        <collision>base_footprint_collision_collision</collision>
      </contact>
      <alwaysOn>true</alwaysOn>
      <updateRate>5</updateRate>
      <plugin name="maru2_bumper_controller" filename="libgazebo_ros_bumper.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>5</updateRate>
        <bumperTopicName>source/bumper_raw</bumperTopicName>
        <frameName>base_footprint</frameName>
      </plugin>
    </sensor>
  </gazebo>
</robot>
